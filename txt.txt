users.db:

main.py:
import tkinter as tk
from login_window import LoginWindow
from signup_window import SignupWindow

def open_login_window():
    login_window = LoginWindow()

def open_signup_window():
    signup_window = SignupWindow()

if __name__ == "__main__":
    root = tk.Tk()
    root.title("Interest Matcher App")

    # Set the initial size of the window to 500x500 pixels
    root.geometry("500x500")

    # Center the window on the screen
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    x = (screen_width // 2) - (500 // 2)
    y = (screen_height // 2) - (500 // 2)
    root.geometry("+{}+{}".format(x, y))

    # Label in the root window
    label = tk.Label(root, text="Welcome to Interest Matcher, the app that helps you find people who share your interests! Whether you're looking for a hiking buddy, a book club member, or a travel companion, we've got you covered.", font=("Arial", 12), wraplength=450)
    label.pack(pady=20, anchor="center")

    # Button to open login window
    button_login = tk.Button(root, text="Login", command=open_login_window)
    button_login.pack(pady=10, anchor="center")

    # Label and button to open sign up window
    label_signup = tk.Label(root, text="You don't have an account?")
    label_signup.pack(pady=5, anchor="center")
    button_signup = tk.Button(root, text="Sign up", command=open_signup_window)
    button_signup.pack(pady=10, anchor="center")

    root.mainloop()

dashboard.py:
import tkinter as tk

class DashboardWindow(tk.Toplevel):
    def __init__(self, name):
        super().__init__()
        self.title("Dashboard")
        self.geometry("800x600")
        self.resizable(False, False)
        self.configure(bg="#FFFFFF")
        
        # Get screen width and height
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        # Calculate x and y coordinates for the window to be centered
        x = int(screen_width/2 - 800/2)
        y = int(screen_height/2 - 600/2)
        
        # Set the window to be centered
        self.geometry(f"800x600+{x}+{y}")
        
        # Welcome label
        welcome_label = tk.Label(self, text="Welcome to Interest Matcher!", font=("Helvetica", 24), bg="#FFFFFF")
        welcome_label.pack(pady=50)
        
        # People with common interests label
        common_interests_label = tk.Label(self, text="People with common interests:", font=("Helvetica", 16), bg="#FFFFFF")
        common_interests_label.pack(pady=10)
        
        # Listbox to display users with common interests
        common_interests_listbox = tk.Listbox(self, font=("Helvetica", 12), height=10)
        common_interests_listbox.pack(padx=10, pady=10)



        
        

signup_window.py:

import tkinter as tk
import sqlite3

class SignupWindow(tk.Toplevel):
    def __init__(self):
        super().__init__()
        self.title("Sign up")

        # Name label and entry field
        self.label_name = tk.Label(self, text="Name:")
        self.label_name.grid(row=0, column=0, sticky="w")
        self.entry_name = tk.Entry(self)
        self.entry_name.grid(row=0, column=1)

        # Email label and entry field
        self.label_email = tk.Label(self, text="Email:")
        self.label_email.grid(row=1, column=0, sticky="w")
        self.entry_email = tk.Entry(self)
        self.entry_email.grid(row=1, column=1)

        # Password label and entry field
        self.label_password = tk.Label(self, text="Password:")
        self.label_password.grid(row=2, column=0, sticky="w")
        self.entry_password = tk.Entry(self, show="*")
        self.entry_password.grid(row=2, column=1)

        # Confirm password label and entry field
        self.label_confirm_password = tk.Label(self, text="Confirm password:")
        self.label_confirm_password.grid(row=3, column=0, sticky="w")
        self.entry_confirm_password = tk.Entry(self, show="*")
        self.entry_confirm_password.grid(row=3, column=1)

        # Age label and entry field
        self.label_age = tk.Label(self, text="Age:")
        self.label_age.grid(row=4, column=0, sticky="w")
        self.entry_age = tk.Entry(self)
        self.entry_age.grid(row=4, column=1)

        # Location label and entry field
        self.label_location = tk.Label(self, text="Location:")
        self.label_location.grid(row=5, column=0, sticky="w")
        self.entry_location = tk.Entry(self)
        self.entry_location.grid(row=5, column=1)

        # Interests label and entry field
        self.label_interests = tk.Label(self, text="Interests:")
        self.label_interests.grid(row=6, column=0, sticky="w")
        self.entry_interests = tk.Entry(self)
        self.entry_interests.grid(row=6, column=1)

        # Sign up button
        self.button_signup = tk.Button(self, text="Sign up", command=self.signup)
        self.button_signup.grid(row=7, column=0, columnspan=2)

    def signup(self):
        # Get the values from the form fields
        name = self.entry_name.get()
        email = self.entry_email.get()
        password = self.entry_password.get()
        confirm_password = self.entry_confirm_password.get()
        age = self.entry_age.get()
        location = self.entry_location.get()
        interests = self.entry_interests.get()

        # Validate the form data
        if not name or not email or not password or not confirm_password:
            tk.messagebox.showerror("Error", "Please fill in all required fields.")
            return

        if password != confirm_password:
            tk.messagebox.showerror("Error", "Passwords do not match.")
            return

        # Save the user data to the database
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("INSERT INTO users (name, email, password, age, location, interests) VALUES (?, ?, ?, ?, ?, ?)", (name, email, password, age, location, interests))
        conn.commit()
        conn.close()

        # Find matches based on common interests
        matches = self.find_matches(interests)

        # Display the matches
        if matches:
            tk.messagebox.showinfo("Matches", "You have been matched with the following users: " + ", ".join(matches))
        else:
            tk.messagebox.showinfo("Matches", "There are no matches at this time.")

        # Inform the user of a successful signup
        tk.messagebox.showinfo("Success", "You have successfully signed up!")

        # Close the signup window
        self.destroy()

    def find_matches(self, interests):
        # Find other users with matching interests
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT name FROM users WHERE interests = ?", (interests,))
        matches = [row[0] for row in c.fetchall()]
        conn.close()

        # Remove the current user from the matches list
        current_user = self.entry_name.get()
        if current_user in matches:
            matches.remove(current_user)

        return matches


login_window.py:

import tkinter as tk
import tkinter
from dashboard import DashboardWindow
import sqlite3
from tkinter import messagebox
from signup_window import SignupWindow


class LoginWindow(tkinter.Toplevel):
    def __init__(self):
        super().__init__()
        self.title("Login")

        # Email label and entry field
        self.label_email = tk.Label(self, text="Email:")
        self.label_email.grid(row=0, column=0, sticky="w")
        self.entry_email = tk.Entry(self)
        self.entry_email.grid(row=0, column=1)

        # Password label and entry field
        self.label_password = tk.Label(self, text="Password:")
        self.label_password.grid(row=1, column=0, sticky="w")
        self.entry_password = tk.Entry(self, show="*")
        self.entry_password.grid(row=1, column=1)

        # Sign up button
        self.button_signup = tk.Button(self, text="Sign up", command=self.open_signup_window)
        self.button_signup.grid(row=2, column=0, columnspan=2)

        # Login button
        self.button_login = tk.Button(self, text="Login", command=self.login)
        self.button_login.grid(row=3, column=0, columnspan=2)

    def open_signup_window(self):
        SignupWindow()

    def login(self):
        email = self.entry_email.get()
        password = self.entry_password.get()

        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM users WHERE email=? AND password=?", (email, password))
        result = cursor.fetchone()

        if result:
            self.destroy() # Close the login window
            DashboardWindow(result) # Create instance of dashboard window
        else:
            messagebox.showerror("Error", "Invalid email or password")

        conn.close()

users.db:







++++++++++++++++++COMMENTS+++++++++++++++++++
# import tkinter as tk

# class DashboardWindow(tk.Toplevel):
#     def __init__(self, name):
#         super().__init__()
#         self.title("Dashboard")
#         self.geometry("800x600")
#         self.resizable(False, False)
#         self.configure(bg="#FFFFFF")
        
#         # Get screen width and height
#         screen_width = self.winfo_screenwidth()
#         screen_height = self.winfo_screenheight()
        
#         # Calculate x and y coordinates for the window to be centered
#         x = int(screen_width/2 - 800/2)
#         y = int(screen_height/2 - 600/2)
        
#         # Set the window to be centered
#         self.geometry(f"800x600+{x}+{y}")
        
#         # Welcome label
#         welcome_label = tk.Label(self, text="Welcome to Interest Matcher!", font=("Helvetica", 24), bg="#FFFFFF")
#         welcome_label.pack(pady=50)
        
#         # People with common interests label
#         common_interests_label = tk.Label(self, text="People with common interests:", font=("Helvetica", 16), bg="#FFFFFF")
#         common_interests_label.pack(pady=10)
        
#         # Listbox to display users with common interests
#         common_interests_listbox = tk.Listbox(self, font=("Helvetica", 12), height=10)
#         common_interests_listbox.pack(padx=10, pady=10)